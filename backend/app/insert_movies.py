# Importation des modules n√©cessaires
import time                            # Pour les pauses (sleep) et timestamps
from database import get_connection   # Fonction personnalis√©e pour se connecter √† la base SQLite
from tmdb_utils import fetch_popular_movies  # Fonction pour r√©cup√©rer les films depuis TMDB
import sqlite3                        # Pour interagir avec SQLite
from datetime import datetime         # Pour afficher la date/heure de lancement du cron
import os                             # Pour v√©rifier l'existence des fichiers
import gzip                           # Pour compresser les fichiers
import shutil                         # Pour copier le contenu d'un fichier dans un autre

# ‚û§ D√©finition du chemin du fichier de log et de la taille maximale avant rotation
LOG_PATH = "/app/cron.log"
MAX_LOG_SIZE = 5 * 1024 * 1024  # 5 MB

# ‚û§ Fonction pour compresser et archiver le fichier de log s‚Äôil devient trop lourd
def rotate_log():
    # V√©rifie si le fichier existe et d√©passe la taille maximale
    if os.path.exists(LOG_PATH) and os.path.getsize(LOG_PATH) > MAX_LOG_SIZE:
        timestamp = time.strftime("%Y%m%d-%H%M%S")  # G√©n√®re un timestamp (ex: 20250424-1432)
        archived_log = f"/app/cron_{timestamp}.log.gz"  # Nom du fichier compress√©

        # üîΩ Compression du log
        with open(LOG_PATH, 'rb') as f_in:
            with gzip.open(archived_log, 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)  # Copie et compresse le contenu

        os.remove(LOG_PATH)  # Supprime l'ancien fichier non compress√©
        print(f"üîÑ Log file rotated and compressed as {archived_log}")

# ‚û§ Ins√®re un film dans la base de donn√©es
def insert_movie(cursor, movie):
    try:
        cursor.execute("""
            INSERT INTO movies (id, title, overview, release_date, original_language, 
                                popularity, vote_average, vote_count, poster_path, is_manual)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0)
        """, (
            movie["id"],
            movie["title"],
            movie.get("overview", ""),
            movie.get("release_date", ""),
            movie.get("original_language", ""),
            movie.get("popularity", 0),
            movie.get("vote_average", 0),
            movie.get("vote_count", 0),
            movie.get("poster_path", "")
        ))
        return 1  # ‚úÖ Retourne 1 si l‚Äôinsertion a r√©ussi
    except sqlite3.IntegrityError:
        return 0  # ‚ùå Retourne 0 si le film existe d√©j√† (cl√© primaire)

# ‚û§ Retourne le nombre total de films actuellement dans la base
def get_total_movies(cursor):
    cursor.execute("SELECT COUNT(*) FROM movies;")
    return cursor.fetchone()[0]

# ‚û§ Fonction principale pour ins√©rer les films populaires jusqu'√† atteindre un seuil
def insert_popular_movies(min_movies=900):
    conn = get_connection()      # Connexion √† la base SQLite
    cursor = conn.cursor()

    print(f"üïí Cron job triggered at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # üßπ Supprimer uniquement les films ins√©r√©s automatiquement (is_manual = 0)
    print("üóëÔ∏è Suppression des anciens films dans la base...")
    cursor.execute("DELETE FROM movies WHERE is_manual = 0;")
    conn.commit()

    current_total = get_total_movies(cursor)
    initial_total = current_total  # Sauvegarde du nombre de films avant insertion
    page = 1  # Pagination TMDB

    # Boucle tant que le nombre de films est inf√©rieur au seuil requis
    while current_total < min_movies:
        print(f"üì• Page {page} - Total actuel : {current_total} films")
        movies = fetch_popular_movies(page)
        if not movies:
            print("‚ö†Ô∏è Aucune donn√©e re√ßue de TMDB, on stoppe.")
            break

        inserted_this_page = 0
        for movie in movies:
            inserted_this_page += insert_movie(cursor, movie)

        conn.commit()  # Sauvegarde dans la base
        current_total = get_total_movies(cursor)
        page += 1
        time.sleep(1)  # Pause d'1 seconde entre chaque appel API

        # Si aucun film nouveau n‚Äôa √©t√© ins√©r√©, cela veut dire que tous les films sont d√©j√† pr√©sents
        if inserted_this_page == 0:
            print("‚ÑπÔ∏è Aucun nouveau film ins√©r√© sur cette page, probablement tous les films sont d√©j√† l√†.")
            break

    # Fermeture de la connexion et affichage du r√©sum√©
    conn.close()
    inserted_total = current_total - initial_total
    print(f"‚úÖ Insertion termin√©e : {current_total} films dans la base. ‚ûï {inserted_total} nouveaux films ajout√©s lors de ce run.")
    print("--------------------------------------------------------")

# ‚û§ Ex√©cution principale du script (appel√© automatiquement par le cron)
if __name__ == "__main__":
    rotate_log()  # üîÑ Avant d‚Äôins√©rer les films, g√©rer la rotation du log si n√©cessaire
    insert_popular_movies(min_movies=1000)
